# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: recommendations.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


class BookCategory(betterproto.Enum):
    """Book categories enumerated"""

    MYSTERY = 0
    SCIENCE_FICTION = 1
    SELF_HELP = 2


@dataclass(eq=False, repr=False)
class RecommendationRequest(betterproto.Message):
    """Book recommendation request"""

    user_id: int = betterproto.int32_field(1)
    category: "BookCategory" = betterproto.enum_field(2)
    max_results: int = betterproto.int32_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class BookRecommendation(betterproto.Message):
    """Book recommendation return value"""

    id: int = betterproto.int32_field(1)
    title: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RecommendationResponse(betterproto.Message):
    """Book recommendation response"""

    recommendations: List["BookRecommendation"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class RecommendationsStub(betterproto.ServiceStub):
    """Book recommendation call"""

    async def recommend(
        self, *, user_id: int = 0, category: "BookCategory" = None, max_results: int = 0
    ) -> "RecommendationResponse":

        request = RecommendationRequest()
        request.user_id = user_id
        request.category = category
        request.max_results = max_results

        return await self._unary_unary(
            "/recommendations.Recommendations/Recommend",
            request,
            RecommendationResponse,
        )


class RecommendationsBase(ServiceBase):
    """Book recommendation call"""

    async def recommend(
        self, user_id: int, category: "BookCategory", max_results: int
    ) -> "RecommendationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_recommend(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "user_id": request.user_id,
            "category": request.category,
            "max_results": request.max_results,
        }

        response = await self.recommend(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/recommendations.Recommendations/Recommend": grpclib.const.Handler(
                self.__rpc_recommend,
                grpclib.const.Cardinality.UNARY_UNARY,
                RecommendationRequest,
                RecommendationResponse,
            ),
        }
